
/*======================================================================================*/
/*                                  Package Definition                                  */
/*======================================================================================*/

package org.keylimebox.simplemq.client;

/*======================================================================================*/
/*                                       Imports                                        */
/*======================================================================================*/

import java.util.Iterator;

/*======================================================================================*/
/*                           Class Definition / Implementation                          */
/*======================================================================================*/
/*======================================================================================*/
/* CLASS:       MultiQueueIterator                                                      */
/**
 * A queue iterator which works just like the {@link QueueIterator}, but provides a simple
 * way to process messages from multiple queues as one. In other words, it will empty out
 * each of the queues specified one after the other.
 * <p>
 * @author      etlweather
 * @since       Jan 2, 2015
 */
/*======================================================================================*/
@SuppressWarnings ("nls")
public class MultiQueueIterator implements Iterator<QueueEntry>
{
    /*==================================================================================*/
    /*===================================            ===================================*/
    /*=================================== Attributes ===================================*/
    /*===================================            ===================================*/
    /*==================================================================================*/

    /*==================================================================================*/
    /* Protected Attributes                                                             */
    /*==================================================================================*/

    /*==================================================================================*/
    /* Private Attributes                                                               */
    /*==================================================================================*/

                /*======================================================================*/
                /* ATTRIBUTE: iterators                                                 */
                /**
                 * Internal iterators for each queue.
                 */
                /*======================================================================*/
   private QueueIterator[]          iterators;

                /*======================================================================*/
                /* ATTRIBUTE: currentIdx                                                */
                /**
                 * IDX of the current iterator.
                 */
                /*======================================================================*/
   private int                      currentIdx;

    /*==================================================================================*/
    /* Class Attributes                                                                 */
    /*==================================================================================*/
        /*==============================================================================*/
        /* Constants                                                                    */
        /*==============================================================================*/

        /*==============================================================================*/
        /* Variables                                                                    */
        /*==============================================================================*/

    /*==================================================================================*/
    /*===================================            ===================================*/
    /*=================================== Operations ===================================*/
    /*===================================            ===================================*/
    /*==================================================================================*/

    /*==================================================================================*/
    /* Static initializer                                                               */
    /*==================================================================================*/

    /*==================================================================================*/
    /* Constructors                                                                     */
    /*==================================================================================*/

        /*==============================================================================*/
        /* OPERATION:   QueueIterator                                                   */
        /**
         * The constructor for this class.
         *
         * <p>
         * @param aQueueIds
         *           The IDs of the queues this iterator is for.
         * <p>
         * @since 2-Jan-2015.
         */
        /*==============================================================================*/
   MultiQueueIterator (String[] aQueueIds, SimpleMqClient aClient)
   {
      if (aQueueIds.length == 0) {
         throw new IllegalArgumentException ("You must supply at least one Queue ID!");
      }

      iterators = new QueueIterator[aQueueIds.length];
      for (int i = 0; i < aQueueIds.length; i++) {
         iterators[i] = new QueueIterator (aQueueIds[i], aClient);
      }
      currentIdx = 0;
   }

    /*==================================================================================*/
    /* Attribute Get Operations                                                         */
    /*==================================================================================*/

    /*==================================================================================*/
    /* Attribute Set Operations                                                         */
    /*==================================================================================*/

    /*==================================================================================*/
    /* Private Operations                                                               */
    /*==================================================================================*/

    /*==================================================================================*/
    /* Protected Operations                                                             */
    /*==================================================================================*/

    /*==================================================================================*/
    /* Package Operations                                                               */
    /*==================================================================================*/

    /*==================================================================================*/
    /* Public Operations                                                                */
    /*==================================================================================*/

         /*=============================================================================*/
         /* OPERATION:   hasNext                                                        */
         /**
          * Checks if there are more items in the queue and collects the next item ready
          * for processing. It also deletes the previous item from the queue.
          *
          * @return true if there are more items to be processed.
          * <p>
          * @see java.util.Iterator#hasNext()
          * <p>
          * @since Dec 31, 2014
          */
         /*=============================================================================*/
   @Override
   public boolean hasNext ()
   {
      if (iterators[currentIdx].hasNext ()) {
         return true;
      }
      else {
         currentIdx++;
         if (currentIdx >= iterators.length) {
            return false;
         }
         else {
            return hasNext ();
         }
      }
   }

         /*=============================================================================*/
         /* OPERATION:   next                                                           */
         /**
          * Returns the next item from the queue.
          *
          * @return the item.
          * <p>
          * @see java.util.Iterator#next()
          * <p>
          * @since Dec 31, 2014
          */
         /*=============================================================================*/
   @Override
   public QueueEntry next ()
   {
      return iterators[currentIdx].next ();
   }

         /*=============================================================================*/
         /* OPERATION:   remove                                                         */
         /**
          * Not supported.
          * <p>
          * @see java.util.Iterator#remove()
          * <p>
          * @since Dec 31, 2014
          */
         /*=============================================================================*/
   @Override
   public void remove ()
   {
      iterators[currentIdx].remove ();;
   }


    /*==================================================================================*/
    /* Abstract Operations (definitions)                                                */
    /*==================================================================================*/

    /*==================================================================================*/
    /* Abstract Operations (implementations)                                            */
    /*==================================================================================*/

    /*==================================================================================*/
    /* Class (static) Operations                                                        */
    /*==================================================================================*/
}

// EOF  QueueIterator.java
